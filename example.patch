--- a/file.go
+++ b/file.go
@@ -1,27 +1,37 @@
package main

func Euclidean(a, b int) int {
-   for b != 0 {
-       a, b = b, a % b
-   }
-   return a
+   if b == 0 {
+       return a
+   }
+   return Euclidean(b, a % b)
}

func Bresenham(x0, y0, x1, y1 int) []Point {
    points := []Point{}
    dx := abs(x1 - x0)
    dy := abs(y1 - y0)
-   sx := 1
-   if x0 > x1 {
-       sx = -1
-   }
-   sy := 1
-   if y0 > y1 {
-       sy = -1
-   }
-   err := dx - dy
+   x, y := x0, y0
+   sx := -1
+   if x0 < x1 {
+       sx = 1
+   }
+   sy := -1
+   if y0 < y1 {
+       sy = 1
+   }
+   if dx > dy {
+       err := float64(dx) / 2.0
+       for x != x1 {
+           points = append(points, Point{x, y})
            err -= dy
-           x0 += sx
-           if 2 * err < dx {
+               if err < 0 {
+                   y += sy
+                   err += float64(dx)
+               }
+               x += sx
+           }
+       }
+   } else {
+       err := float64(dy) / 2.0
+       for y != y1 {
+           points = append(points, Point{x, y})
+           err -= dx
+           if err < 0 {
+               x += sx
+               err += float64(dy)
+           }
+           y += sy
+       }
+   }
+   points = append(points, Point{x1, y1})
    return points
}
